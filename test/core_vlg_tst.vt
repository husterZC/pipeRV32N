// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "08/19/2021 10:54:42"
                                                                                
// Verilog Test Bench template for design : core
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ps/ 1 ps
module core_vlg_tst();
// constants                                           
// general purpose registers
//reg eachvec;
// test vector input registers
reg clk;
reg reset;
// wires                                               
wire [31:0]  a_x1;
wire [31:0]  a_x2;
wire [31:0]  a_x3;
wire [31:0]  a_x4;
wire [31:0]  a_x5;
wire [31:0]  a_x6;
wire [31:0]  a_x7;
wire [31:0]  ex_data_imm;
wire [2:0]  ex_dest;
wire ex_done;
wire ex_enable;
wire [1:0]  ex_error_code;
wire [2:0]  ex_mem_ctrl;
wire ex_nop;
wire ex_nop_statue;
wire [2:0]  ex_reg_extra;
wire [31:0]  ex_res;
wire [2:0]  ex_rs1;
wire [2:0]  ex_rs2;
wire [2:0]  ex_wb_ctrl;
wire [3:0]  id_alu_ctrl;
wire [31:0]  id_data_imm;
wire [31:0]  id_data_x;
wire [31:0]  id_data_y;
wire [2:0]  id_dest;
wire id_done;
wire id_enable;
wire [1:0]  id_error_code;
wire id_is_x_reg;
wire id_is_y_reg;
wire [2:0]  id_mem_ctrl;
wire id_nop;
wire id_nop_statue;
wire [2:0]  id_reg_extra;
wire id_req_jal;
wire id_req_nop;
wire [2:0]  id_wb_ctrl;
wire [1:0]  if_addr_mode;
wire [31:0]  if_addr_to_main_memory;
wire [31:0]  if_current_pc_addr;
wire if_done;
wire if_enable;
wire [1:0]  if_error_code;
wire [31:0]  if_inst_from_main_memory;
wire [31:0]  if_instruction;
wire if_nop;
wire if_nop_statue;
wire wb_error_stop;
wire wb_mem_done;
wire wb_mem_enable;
wire wb_mem_nop;
wire wb_register_file_write_en;
wire wb_req;
wire wb_req_jalr_branch;

// assign statements (if any)                          
core i1 (
// port map - connection between master ports and signals/registers   
	.a_x1(a_x1),
	.a_x2(a_x2),
	.a_x3(a_x3),
	.a_x4(a_x4),
	.a_x5(a_x5),
	.a_x6(a_x6),
	.a_x7(a_x7),
	.clk(clk),
	.ex_data_imm(ex_data_imm),
	.ex_dest(ex_dest),
	.ex_done(ex_done),
	.ex_enable(ex_enable),
	.ex_error_code(ex_error_code),
	.ex_mem_ctrl(ex_mem_ctrl),
	.ex_nop(ex_nop),
	.ex_nop_statue(ex_nop_statue),
	.ex_reg_extra(ex_reg_extra),
	.ex_res(ex_res),
	.ex_rs1(ex_rs1),
	.ex_rs2(ex_rs2),
	.ex_wb_ctrl(ex_wb_ctrl),
	.id_alu_ctrl(id_alu_ctrl),
	.id_data_imm(id_data_imm),
	.id_data_x(id_data_x),
	.id_data_y(id_data_y),
	.id_dest(id_dest),
	.id_done(id_done),
	.id_enable(id_enable),
	.id_error_code(id_error_code),
	.id_is_x_reg(id_is_x_reg),
	.id_is_y_reg(id_is_y_reg),
	.id_mem_ctrl(id_mem_ctrl),
	.id_nop(id_nop),
	.id_nop_statue(id_nop_statue),
	.id_reg_extra(id_reg_extra),
	.id_req_jal(id_req_jal),
	.id_req_nop(id_req_nop),
	.id_wb_ctrl(id_wb_ctrl),
	.if_addr_mode(if_addr_mode),
	.if_addr_to_main_memory(if_addr_to_main_memory),
	.if_current_pc_addr(if_current_pc_addr),
	.if_done(if_done),
	.if_enable(if_enable),
	.if_error_code(if_error_code),
	.if_inst_from_main_memory(if_inst_from_main_memory),
	.if_instruction(if_instruction),
	.if_nop(if_nop),
	.if_nop_statue(if_nop_statue),
	.reset(reset),
	.wb_error_stop(wb_error_stop),
	.wb_mem_done(wb_mem_done),
	.wb_mem_enable(wb_mem_enable),
	.wb_mem_nop(wb_mem_nop),
	.wb_register_file_write_en(wb_register_file_write_en),
	.wb_req(wb_req),
	.wb_req_jalr_branch(wb_req_jalr_branch)
);
initial                                                
begin                                                  
clk = 1'b0;
reset = 1'b0;                                      
$display("Running testbench");                       
end  

initial begin
#2000 $finish;
end

always                                                             
begin                                                  
#5 clk <= ~clk;                                    
end                                                    
endmodule

